<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- *********指定哪些资源不需要进行权限校验，可以使用通配符************* -->
    <security:http security="none" pattern="/login.html"></security:http>

    <!--**************************指定拦截的*********************-->
    <security:http auto-config="true" use-expressions="true">
        <!--配置拦截规则，/** 表示拦截所有请求-->
        <!--
            pattern:描述拦截规则
            asscess:指定所需的访问角色或者访问权限
        -->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/a.html" access="isAuthenticated()"/>

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/pages/b.html" access="hasAuthority('add')"/>

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/pages/c.html" access="hasRole('ROLE_ADMIN')"/>

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/pages/d.html" access="hasRole('ADMIN')"/>

        <!--与上面的等价-->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>

        <!--如果我们要使用自己指定的页面作为登录页面，必须配置登录表单.页面提交的登录表单请求是由框架负责处理-->
        <!--
            login-page:指定登录页面访问URL
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"></security:form-login>

        <!--
          csrf：对应CsrfFilter过滤器
          disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"></security:csrf>

        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径
          logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html" invalidate-session="true"/>

    </security:http>


    <!--&lt;!&ndash; *********************认证管理器，用于处理认证操作********************* &ndash;&gt;-->
    <!--<security:authentication-manager>-->

    <!--    &lt;!&ndash;authentication-provider：认证提供者，执行具体的认证逻辑&ndash;&gt;-->
    <!--    <security:authentication-provider user-service-ref="userService">-->
    <!--        &lt;!&ndash;指定bcrypt密码加密策略&ndash;&gt;-->
    <!--        <security:password-encoder ref="passwordEncoder" />-->
    <!--    </security:authentication-provider>-->
    <!--</security:authentication-manager>-->

    <!--<bean id="userService" class="com.swz.security.UserService"></bean>-->


    <!-- *************************************************************************************   -->
    <!--spring注解驱动-->
    <context:annotation-config></context:annotation-config>

    <!--*************************** 使用加密 **********************************-->
    <!--配置密码加密对象 bcrypt -->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <!-- *********************认证管理器，用于处理认证操作（针对加密）********************* -->
    <security:authentication-manager>
        <!--authentication-provider：认证提供者，执行具体的认证逻辑-->
        <security:authentication-provider user-service-ref="userService2">
            <!--指定bcrypt密码加密策略-->
            <security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="userService2" class="com.swz.security.UserService2"></bean>

    <!--*************************** 针对注解进行安全校验（校验到方法） **********************************-->
    <!-- 注解方式的权限验证 -->
    <!--第一步：在spring-security.xml文件中配置组件扫描，用于扫描Controller-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <context:component-scan base-package="com.swz.controller"></context:component-scan>
    <!--第二步：开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>


</beans>
